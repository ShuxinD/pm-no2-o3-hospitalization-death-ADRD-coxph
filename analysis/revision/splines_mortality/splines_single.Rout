> # setup ----
> rm(list = ls())
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 283111 15.2     664168 35.5   450927 24.1
Vcells 486861  3.8    8388608 64.0  1814805 13.9
> 
> library(data.table)
> library(fst)
> setDTthreads(threads = 0)
> library(survival)
> 
> basedir <- "/n/dominici_nsaph_l3/Lab/projects/pm-no2-o3-hospitalization-death-ADRD-coxph"
> getwd()
[1] "/n/dominici_nsaph_l3/Lab/projects/pm-no2-o3-hospitalization-death-ADRD-coxph/splines_mortality"
> data_path <- file.path(basedir, "data", "ADRDcohort_dead.fst")
> 
> ## load data ----
> dt <- read_fst(data_path, as.data.table = T)
> names(dt)
 [1] "qid"                "zip"                "year"              
 [4] "sex"                "race"               "age"               
 [7] "dual"               "statecode"          "dead"              
[10] "mean_bmi"           "smoke_rate"         "hispanic"          
[13] "pct_blk"            "medhouseholdincome" "medianhousevalue"  
[16] "poverty"            "education"          "popdensity"        
[19] "pct_owner_occ"      "summer_tmmx"        "winter_tmmx"       
[22] "summer_rmax"        "winter_rmax"        "firstADRDyr"       
[25] "pm25"               "no2"                "ozone"             
[28] "ozone_summer"       "ox"                 "entry_age"         
[31] "entry_age_break"    "race_collapsed"     "region"            
> 
> dt[, followupyr_start := (year - firstADRDyr-1)]
> dt[, followupyr_end := (year - firstADRDyr)]
> 
> IQRs <- data.table(IQR(dt$pm25), IQR(dt$no2), IQR(dt$ozone), IQR(dt$ox), IQR(dt$ozone_summer))
> colnames(IQRs) <- c("pm25", "no2", "ozone", "ox", "ozone_summer")
> print(IQRs)
       pm25      no2    ozone       ox ozone_summer
1: 3.682746 13.83575 4.086132 4.745538     6.276961
> 
> ## fit single-pollutant models ----
> pollutants <- c("pm25", "no2", "ozone_summer", "ox")
> for (pollutants_i in pollutants){
+   cat("fitting coxph model ", pollutants_i, "...\n")
+   cox <- coxph(Surv(time = followupyr_start, time2 = followupyr_end, event = dead) ~
+                  pspline(get(pollutants_i)) +
+                  mean_bmi + smoke_rate +
+                  hispanic + pct_blk + medhouseholdincome + medianhousevalue + poverty + education + popdensity + pct_owner_occ +
+                  summer_tmmx + winter_tmmx + summer_rmax + winter_rmax +
+                  as.factor(year) +  as.factor(region) +
+                  strata(as.factor(entry_age_break), as.factor(sex), as.factor(race_collapsed), as.factor(dual)) + cluster(qid),
+                data = dt,
+                tie = "efron",
+                na.action = na.omit)
+   cat("drawing splines....\n")
+   # Open PDF device
+   pdf(paste0("splines_single_", pollutants_i, ".pdf"), width = 7, height = 5)
+   # Generate the plot
+   # termplot(cox, term = 1, se = TRUE)
+   termplot(cox, term = 1, se=TRUE, col.term = 1, col.se = 1)
+   # Close the file
+   dev.off()
+   # Open png device
+   png(paste0("splines_single_", pollutants_i, ".pdf"), units = "in", width = 7, height = 5, res = 300)
+   # Generate the plot
+   termplot(cox, term = 1, se=TRUE, col.term = 1, col.se = 1)
+   # Close the file
+   dev.off()
+ }
fitting coxph model  pm25 ...
drawing splines....
Error in plot.window(...) : invalid 'xlim' value
Calls: termplot -> plot -> plot.default -> localWindow -> plot.window
In addition: Warning message:
In xy.coords(x, y, xlabel, ylabel, log) : NAs introduced by coercion
Execution halted
